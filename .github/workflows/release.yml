name: Build and Publish

on:
  push:
    branches:
      - dev
      - bate
      - main
      - master
  workflow_dispatch:

env:
  solution_file: MicrosoftTTS_DGJ_Plugin.sln
  main_project: MicrosoftTTS_DGJ_Plugin
  
jobs:
  build:
    runs-on: windows-latest
    
    steps:
      #签出仓库
      - name: Checkout repository
        uses: actions/checkout@v3
        
     # - name: Test
     #   run: |
     #     pwd
     #     ls ./bin/Release
        
      
      #读取版本号文件
      - name: Get version
        id: get_version
        run: |
          try {
                $version = Get-Content -Path VERSION -Raw
          } catch {
              $version = ""
              echo "⭐请设置VERSION文件"
          }
          $version = $version.Trim()
          Write-Host "Version: $version"
          Write-Host "version=$version" >> GITHUB_OUTPUT

      #判断是否存在这个发布版本
      - name: Check if release exists
        id: check_release
        uses: actions/github-script@v4
        with:
          script: |
            const version = "v" + '${{ steps.get_version.outputs.version }}';
            const releases = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            console.log(`当前版本号: ${version}`);
            const releaseExists = releases.data.some(release => release.name === version);
            console.log(`Release exists: ${releaseExists}`);
            //console.log(`::set-output name=release_exists::${releaseExists}`);
            console.log(`"release_exists=${releaseExists} >> $GITHUB_OUTPUT"`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      #设置环版本境变量
      - name: Set APPVEYOR_BUILD_VERSION environ
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        run: |
          try{
                echo "APPVEYOR_BUILD_VERSION=$(cat ./VERSION)" >> $env:GITHUB_ENV
          }
          catch{
                "APPVEYOR_BUILD_VERSION=" >> $env:GITHUB_ENV
                echo "⭐请设置VERSION文件"
          }
          echo $env:APPVEYOR_BUILD_VERSION

      - name: Use APPVEYOR_BUILD_VERSION environ
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        run: echo $env:APPVEYOR_BUILD_VERSION

      - name: setup-msbuild
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        uses: microsoft/setup-msbuild@v1.3.1
          
      #- name: Setup MSBuild Path
      #  uses: warrenbuckley/Setup-MSBuild@v1
      
      - name: Clean project
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        run: msbuild /t:Clean
        
      #- name: Clear NuGet cache
      #  run: dotnet nuget locals all --clear

      #- name: Restore dependencies
      #  run: dotnet restore
      #  working-directory: /packages
            
      - name: Restore NuGet
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        #run: dotnet restore
        run: nuget restore ${{ env.solution_file }}
  
      #构建项目
      - name: Build project
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        run: msbuild ${{ env.solution_file }} /p:Configuration=Release

      #获取最后一个提交的注释
      #- name: Get last commit message
      #  id: get_commit_message
      #  if: ${{ steps.check_release.outputs.release_exists == 'false' }}
      #  run: |
      #    git log -1 --pretty=format:"%b" > commit_message.txt
      #    echo "commit_message=$(cat commit_message.txt)" >> GITHUB_OUTPUT
      
      - name: Get update description
        id: get_update_description
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        run: |
          try {
            $desc = Get-Content -Raw -Path ./update_description.md
            Write-Host "update_description=$desc" >> GITHUB_OUTPUT
          } catch {
            $desc = ""
            echo "
            ⭐
            请设置update_description.md文件"
          }



      #创建发布
      - name: Create Release
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN : ${{secrets.GITHUB_TOKEN}}
        with:
          #token: ${{ secrets.Releases }}
          #tag_name: v1.0.0
          #release_name: Release 1.0.0
          #draft: false
          #prerelease: false
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}
          body: |
            Auto-generated build
            [⭐Update⭐]
            ${{ steps.get_update_description.outputs.update_description }}
          draft: false
          prerelease: false

      #- name: Publish
      #  run: dotnet publish --configuration Release --output publish
      
      #压缩打包资产文件
      - name: Create ZIP archive
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        run: |
          $version = $env:APPVEYOR_BUILD_VERSION
          $zip_file = "${{ env.main_project}}_$version.zip"
          #Compress-Archive -Path "./bin/Release/${{ env.main_project}}.dll" -DestinationPath "./bin/Release/$zip_file"
          Compress-Archive -Path ./${{ env.main_project}}/bin/Release/${{ env.main_project}}.dll -DestinationPath ./${{ env.main_project}}/bin/Release/$zip_file
          $hash = Get-FileHash ./${{ env.main_project}}/bin/Release/${{ env.main_project}}.dll -Algorithm SHA256
          $hashValue = $hash.Hash
          echo $hashValue >> ./${{ env.main_project}}/bin/Release/sha256.txt
          
      #上传资产
      - name: Upload Release Assets
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        id: upload_assets_zip
        uses: actions/upload-release-asset@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.main_project}}/bin/Release/${{ env.main_project}}_${{ steps.get_version.outputs.version }}.zip
          asset_name: ${{ env.main_project}}_${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        id: upload_assets_dll
        uses: actions/upload-release-asset@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.main_project}}/bin/Release/${{ env.main_project}}.dll
          asset_name: ${{ env.main_project}}.dll
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        if: ${{ steps.check_release.outputs.release_exists == 'false' }}
        id: upload_assets_sha
        uses: actions/upload-release-asset@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.main_project}}/bin/Release/sha256.txt
          asset_name: sha256.txt
          asset_content_type: application/octet-stream
